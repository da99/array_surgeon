// Generated by CoffeeScript 1.3.3
(function() {
  var remove_sequences, replace_sequences, _,
    __slice = [].slice;

  if (Array.prototype.surgeon) {
    throw new Error("Already defined: Array.prototype.surgeon");
  }

  _ = require("underscore");

  Array.prototype.surgeon = function() {
    var args, op;
    op = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (!exports[op]) {
      throw new Error("Unknown surgeon op: " + op);
    }
    return exports[op].apply(exports, [this].concat(__slice.call(args)));
  };

  exports.replace_sequences = replace_sequences = function(raw_arr, finders, replace) {
    var arr, ele, f, fi, i, is_seq, l, slice, slice_end, splice_args, v, _i, _len;
    if (raw_arr.length < finders.length) {
      return raw_arr;
    }
    arr = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = raw_arr.length; _i < _len; _i++) {
        v = raw_arr[_i];
        _results.push(v);
      }
      return _results;
    })();
    i = -1;
    l = arr.length;
    while (i < l) {
      i += 1;
      slice_end = finders.length + i;
      slice = arr.slice(i, slice_end);
      is_seq = false;
      if (slice.length < finders.length) {
        break;
      }
      if (slice.length === finders.length) {
        for (fi = _i = 0, _len = finders.length; _i < _len; fi = ++_i) {
          f = finders[fi];
          ele = slice[fi];
          is_seq = typeof f === 'function' ? f(ele) : ele === f;
          if (!is_seq) {
            break;
          }
        }
      }
      if (is_seq) {
        splice_args = [i, finders.length];
        if (typeof replace === 'function') {
          splice_args.push(replace(slice));
        } else if (typeof replace !== 'undefined') {
          splice_args.push(replace);
        }
        arr.splice.apply(arr, splice_args);
        l = arr.length;
      }
    }
    return arr;
  };

  exports.remove_sequences = remove_sequences = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return replace_sequences.apply(null, args);
  };

}).call(this);
