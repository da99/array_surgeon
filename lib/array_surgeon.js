// Generated by CoffeeScript 1.3.3
(function() {
  var Surgeon, humane_list, _,
    __slice = [].slice;

  _ = require("underscore");

  humane_list = require("humane_list");

  Surgeon = (function() {

    function Surgeon(hay) {
      this.hay = hay;
    }

    Surgeon.prototype.describe_slice = function(finders, offset) {
      var arr, current_i, ele, ele_arr, f, fi, final, finders_match, i, orig_i, slice, slice_end, slice_start, _i, _len;
      arr = this.hay;
      final = {
        start_index: null,
        end_index: null,
        length: 0
      };
      if (offset == null) {
        offset = 0;
      }
      current_i = offset - 1;
      while (current_i < arr.length) {
        current_i += 1;
        i = current_i;
        slice_start = i;
        slice_end = i;
        finders_match = false;
        slice = [];
        for (fi = _i = 0, _len = finders.length; _i < _len; fi = ++_i) {
          f = finders[fi];
          if ((i + fi) >= arr.length) {
            break;
          }
          ele = arr[i + fi];
          if (typeof f === 'function' && f.is_splat) {
            ele_arr = [];
            orig_i = i;
            while ((i + fi < arr.length) && f(ele, i + fi, fi)) {
              ele_arr.push(ele);
              i += 1;
              ele = arr[i + fi];
            }
            finders_match = !_.isEmpty(ele_arr);
            if (finders_match) {
              i = orig_i + ele_arr.length - 1;
              slice_end += ele_arr.length;
              slice.push(ele_arr);
            }
          } else {
            finders_match = typeof f === 'function' ? f(ele, i + fi, fi) : ele === f;
            if (finders_match) {
              slice.push(ele);
              slice_end += 1;
            }
          }
          if (!finders_match) {
            break;
          }
        }
        if (finders_match) {
          final.start_index = slice_start;
          final.end_index = slice_end;
          final.length = slice_end - slice_start;
          final.slice = slice;
          final.indexs = _.range(slice_start, slice_end);
          break;
        }
      }
      if (final.length === 0) {
        return null;
      }
      return final;
    };

    Surgeon.prototype.alter_all = function() {
      var alter, args, meth, new_arr;
      meth = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      new_arr = this.hay;
      alter = function() {
        var _ref;
        new_arr = (_ref = module.exports(new_arr))[meth].apply(_ref, args);
        return new_arr;
      };
      while (!_.isEqual(new_arr, alter())) {
        new_arr;

      }
      return new_arr;
    };

    Surgeon.prototype.replace_all = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.alter_all.apply(this, ['replace'].concat(__slice.call(args)));
    };

    Surgeon.prototype.remove_all = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.alter_all.apply(this, ['remove'].concat(__slice.call(args)));
    };

    Surgeon.prototype.remove = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.replace.apply(this, args);
    };

    Surgeon.prototype.replace = function() {
      var arr, finders, i, l, meta, replaces, splice_args;
      finders = arguments[0], replaces = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.hay.length < finders.length) {
        return this.hay;
      }
      arr = this.hay.slice(0);
      i = -1;
      l = arr.length;
      while (i < l) {
        i += 1;
        meta = module.exports(arr).describe_slice(finders, i);
        if (!meta) {
          break;
        }
        i = meta.end_index - 1;
        splice_args = [meta.start_index, meta.length].concat(replaces);
        arr.splice.apply(arr, splice_args);
        l = arr.length;
        break;
      }
      return arr;
    };

    return Surgeon;

  })();

  module.exports = function(hay) {
    return new Surgeon(hay);
  };

}).call(this);
