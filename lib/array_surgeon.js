// Generated by CoffeeScript 1.3.3
(function() {
  var Surgeon, humane_list, _,
    __slice = [].slice;

  _ = require("underscore");

  humane_list = require("humane_list");

  Surgeon = (function() {

    function Surgeon(hay) {
      this.hay = hay;
    }

    Surgeon.prototype.describe_slice = function(finders, offset) {
      var ele_arr, f, fi, final, finders_match, length, list, move_backward, orig_pos, slice, slice_end, _i, _len;
      list = new humane_list(this.hay);
      final = {
        start_index: null,
        end_index: null,
        length: 0
      };
      list.to((offset || 0) + 1);
      while (true) {
        orig_pos = list.position();
        finders_match = false;
        slice = [];
        slice_end = orig_pos - 1;
        length = 0;
        for (fi = _i = 0, _len = finders.length; _i < _len; fi = ++_i) {
          f = finders[fi];
          if (typeof f === 'function' && f.is_splat) {
            ele_arr = [];
            move_backward = false;
            while (f(list.value(), list.position() - 1, fi)) {
              ele_arr.push(list.value());
              if (list.is_at_end()) {
                break;
              }
              list.forward();
              move_backward = true;
            }
            finders_match = !_.isEmpty(ele_arr);
            if (finders_match) {
              length += ele_arr.length;
              slice.push(ele_arr);
            }
            if (move_backward) {
              list.backward();
            }
          } else {
            finders_match = typeof f === 'function' ? f(list.value(), list.position() - 1, fi) : list.value() === f;
            if (finders_match) {
              length += 1;
              slice.push(list.value());
            }
          }
          if (!finders_match) {
            break;
          }
          if (list.is_at_end()) {
            break;
          }
          list.forward();
        }
        if (finders_match) {
          final.start_index = orig_pos - 1;
          final.end_index = final.start_index + length;
          final.length = length;
          final.slice = slice;
          final.indexs = _.range(final.start_index, final.end_index);
          break;
        } else {
          list.to(orig_pos);
        }
        if (list.is_at_end()) {
          break;
        }
        list.forward();
      }
      if (final.length === 0) {
        return null;
      }
      return final;
    };

    Surgeon.prototype.alter_all = function() {
      var alter, args, meth, new_arr;
      meth = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      new_arr = this.hay;
      alter = function() {
        var _ref;
        new_arr = (_ref = module.exports(new_arr))[meth].apply(_ref, args);
        return new_arr;
      };
      while (!_.isEqual(new_arr, alter())) {
        new_arr;

      }
      return new_arr;
    };

    Surgeon.prototype.replace_all = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.alter_all.apply(this, ['replace'].concat(__slice.call(args)));
    };

    Surgeon.prototype.remove_all = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.alter_all.apply(this, ['remove'].concat(__slice.call(args)));
    };

    Surgeon.prototype.remove = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.replace.apply(this, args);
    };

    Surgeon.prototype.replace = function() {
      var arr, finders, i, l, meta, replaces, splice_args;
      finders = arguments[0], replaces = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.hay.length < finders.length) {
        return this.hay;
      }
      arr = this.hay.slice(0);
      i = -1;
      l = arr.length;
      while (i < l) {
        i += 1;
        meta = module.exports(arr).describe_slice(finders, i);
        if (!meta) {
          break;
        }
        i = meta.end_index - 1;
        splice_args = [meta.start_index, meta.length].concat(replaces);
        arr.splice.apply(arr, splice_args);
        l = arr.length;
        break;
      }
      return arr;
    };

    return Surgeon;

  })();

  module.exports = function(hay) {
    return new Surgeon(hay);
  };

}).call(this);
