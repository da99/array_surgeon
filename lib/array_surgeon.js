// Generated by CoffeeScript 1.3.3
(function() {
  var Surgeon, _,
    __slice = [].slice;

  _ = require("underscore");

  Surgeon = (function() {

    function Surgeon(hay) {
      this.hay = hay;
    }

    Surgeon.prototype.describe_slice = function(finders, offset) {
      var arr, ele, f, fi, final, i, is_seq, slice, slice_end, _i, _len;
      arr = this.hay;
      final = {
        start_index: null,
        end_index: null,
        length: 0
      };
      if (offset == null) {
        offset = 0;
      }
      i = offset - 1;
      while (i < arr.length) {
        i += 1;
        slice_end = finders.length + i;
        slice = arr.slice(i, slice_end);
        is_seq = false;
        if (slice.length !== finders.length) {
          break;
        }
        if (slice.length === finders.length) {
          for (fi = _i = 0, _len = finders.length; _i < _len; fi = ++_i) {
            f = finders[fi];
            ele = slice[fi];
            is_seq = typeof f === 'function' ? f(ele, i + fi, fi) : ele === f;
            if (!is_seq) {
              break;
            }
          }
        }
        if (is_seq) {
          final.start_index = i;
          final.end_index = slice_end;
          final.length = slice.length;
          final.slice = slice;
          break;
        }
      }
      if (final.length === 0) {
        return null;
      }
      return final;
    };

    Surgeon.prototype.alter_all = function() {
      var alter, args, meth, new_arr;
      meth = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      new_arr = this.hay.slice(0);
      alter = function() {
        var _ref;
        new_arr = (_ref = module.exports(new_arr))[meth].apply(_ref, args);
        return new_arr;
      };
      while (!_.isEqual(new_arr, alter())) {
        new_arr;

      }
      return new_arr;
    };

    Surgeon.prototype.replace_all = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.alter_all.apply(this, ['replace'].concat(__slice.call(args)));
    };

    Surgeon.prototype.remove_all = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.alter_all.apply(this, ['remove'].concat(__slice.call(args)));
    };

    Surgeon.prototype.remove = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.replace.apply(this, args);
    };

    Surgeon.prototype.replace = function(finders, replace) {
      var arr, i, l, meta, splice_args;
      if (this.hay.length < finders.length) {
        return this.hay;
      }
      arr = this.hay.slice(0);
      i = -1;
      l = arr.length;
      while (i < l) {
        i += 1;
        meta = module.exports(arr).describe_slice(finders, i);
        if (!meta) {
          break;
        }
        i = meta.end_index - 1;
        splice_args = [meta.start_index, meta.length];
        if (typeof replace === 'function') {
          splice_args.push(replace(meta.slice));
        } else if (typeof replace !== 'undefined') {
          splice_args.push(replace);
        }
        arr.splice.apply(arr, splice_args);
        l = arr.length;
        break;
      }
      return arr;
    };

    return Surgeon;

  })();

  module.exports = function(hay) {
    return new Surgeon(hay);
  };

}).call(this);
