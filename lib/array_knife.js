// Generated by CoffeeScript 1.3.3
(function() {
  var get_seqs, remove, replace, _,
    __slice = [].slice;

  if (Array.prototype.knife) {
    throw new Error("Already defined: Array.prototype.knife");
  }

  _ = require("underscore");

  Array.prototype.knife = function() {
    var args, op;
    op = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (!exports[op]) {
      throw new Error("Unknown knife op: " + op);
    }
    return exports[op].apply(exports, [this].concat(__slice.call(args)));
  };

  exports.replace = replace = function(arr, func) {
    return [];
  };

  exports.remove = remove = function(arr, finder) {
    var conseq_arr, end, first, i, i_follows_prev, indxs, is_conseq, last, new_arr, props, start, v, _i, _len;
    start = null;
    end = null;
    indxs = [];
    last = arr.length - 1;
    for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
      v = arr[i];
      i_follows_prev = (indxs.length === 0) || (i - _.last(indxs) === -1);
      if (!i_follows_prev) {
        break;
      }
      props = {
        index: i,
        is_first: i === 0,
        is_last: i === last
      };
      if (finder(v, props)) {
        indxs.push(i);
      }
    }
    if (indxs.length === 0) {
      return arr;
    }
    first = indxs[0];
    conseq_arr = (function() {
      var _j, _len1, _results;
      _results = [];
      for (i = _j = 0, _len1 = indxs.length; _j < _len1; i = ++_j) {
        v = indxs[i];
        _results.push(i + first);
      }
      return _results;
    })();
    is_conseq = conseq_arr.join(',') === indxs.join(',');
    if (!is_conseq) {
      return arr;
    }
    new_arr = (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
        v = arr[_j];
        _results.push(v);
      }
      return _results;
    })();
    new_arr.splice(indxs[0], indxs.length);
    return remove(new_arr, finder);
  };

  exports.get_seqs = get_seqs = function(arr, finder) {
    var current, end, i, i_follows_prev, indxs, last, props, start, v, _i, _len;
    start = null;
    end = null;
    indxs = [[]];
    current = _.last(indxs);
    last = arr.length - 1;
    for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
      v = arr[i];
      i_follows_prev = (current.length === 0) || ((i - _.last(current)) === 1);
      props = {
        index: i,
        is_first: i === 0,
        is_last: i === last
      };
      if (finder(v, props)) {
        if (!i_follows_prev) {
          current = [];
          indxs.push(current);
        }
        current.push(i);
      }
    }
    if (indxs[0].length === 0) {
      indxs.shift;
    }
    if (indxs.length === 0) {
      return [];
    }
    return indxs;
  };

}).call(this);
