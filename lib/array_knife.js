// Generated by CoffeeScript 1.3.3
(function() {
  var get_first_seq_starting_at, get_seqs, remove, replace, _,
    __slice = [].slice;

  if (Array.prototype.knife) {
    throw new Error("Already defined: Array.prototype.knife");
  }

  _ = require("underscore");

  Array.prototype.knife = function() {
    var args, op;
    op = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (!exports[op]) {
      throw new Error("Unknown knife op: " + op);
    }
    return exports[op].apply(exports, [this].concat(__slice.call(args)));
  };

  exports.replace = replace = function(arr, func) {
    return [];
  };

  exports.remove = remove = function(arr, finder, yes_or_no) {
    var do_splice, new_arr, s, slice, v;
    s = get_first_seq_starting_at(0, arr, finder);
    new_arr = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        v = arr[_i];
        _results.push(v);
      }
      return _results;
    })();
    if (s.length === 0) {
      return new_arr;
    }
    do_splice = yes_or_no ? (slice = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = s.length; _i < _len; _i++) {
        v = s[_i];
        _results.push(new_arr[v]);
      }
      return _results;
    })(), yes_or_no(slice)) : true;
    if (do_splice) {
      new_arr.splice(s[0], s.length);
    }
    return remove(new_arr, finder, yes_or_no);
  };

  exports.get_first_seq_starting_at = get_first_seq_starting_at = function(offset, arr, finder) {
    var current, i, i_follows_prev, i_in_seq, l, last_i, props, v;
    i = offset;
    l = arr.length;
    i_in_seq = -1;
    current = [];
    last_i = arr.length - 1;
    while (i < l) {
      v = arr[i];
      i_follows_prev = (current.length === 0) || ((i - _.last(current)) === 1);
      if (!i_follows_prev) {
        break;
      }
      i_in_seq += 1;
      props = {
        index: i,
        seq_index: i_in_seq,
        is_first: i === 0,
        is_last: i === last_i
      };
      if (finder(v, props)) {
        current.push(i);
      }
      i = i + 1;
    }
    return current;
  };

  exports.get_seqs = get_seqs = function(arr, finder) {
    var current, i, indxs, l, last, seq;
    indxs = [];
    current = _.last(indxs);
    last = arr.length - 1;
    l = arr.length;
    i = 0;
    while (i < l) {
      i = indxs.length === 0 ? i : _.last(_.last(indxs)) + 1;
      seq = get_first_seq_starting_at(i, arr, finder);
      if (seq.length === 0) {
        break;
      }
      indxs.push(seq);
      i = i + 1;
    }
    return indxs;
  };

}).call(this);
